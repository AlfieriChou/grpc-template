/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf')
var goog = jspb
var global = Function('return this')()

goog.exportSymbol('proto.message.MessageRequest', null, global)
goog.exportSymbol('proto.message.MessageResponse', null, global)

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.MessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.message.MessageRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.message.MessageRequest.displayName = 'proto.message.MessageRequest'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.message.MessageRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.message.MessageRequest.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.message.MessageRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.message.MessageRequest.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        messageId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        messageType: jspb.Message.getFieldWithDefault(msg, 2, '')
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.MessageRequest}
 */
proto.message.MessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.message.MessageRequest()
  return proto.message.MessageRequest.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.MessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.MessageRequest}
 */
proto.message.MessageRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessageId(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessageType(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.MessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.message.MessageRequest.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.MessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.MessageRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getMessageId()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getMessageType()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
}

/**
 * optional string message_id = 1;
 * @return {string}
 */
proto.message.MessageRequest.prototype.getMessageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/** @param {string} value */
proto.message.MessageRequest.prototype.setMessageId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string message_type = 2;
 * @return {string}
 */
proto.message.MessageRequest.prototype.getMessageType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/** @param {string} value */
proto.message.MessageRequest.prototype.setMessageType = function(value) {
  jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.MessageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.message.MessageResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
  proto.message.MessageResponse.displayName = 'proto.message.MessageResponse'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.message.MessageResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.message.MessageResponse.toObject(opt_includeInstance, this)
  }

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.message.MessageResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.message.MessageResponse.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        messageId: jspb.Message.getFieldWithDefault(msg, 1, ''),
        messageType: jspb.Message.getFieldWithDefault(msg, 2, '')
      }

    if (includeInstance) {
      obj.$jspbMessageInstance = msg
    }
    return obj
  }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.MessageResponse}
 */
proto.message.MessageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes)
  var msg = new proto.message.MessageResponse()
  return proto.message.MessageResponse.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.MessageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.MessageResponse}
 */
proto.message.MessageResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break
    }
    var field = reader.getFieldNumber()
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessageId(value)
        break
      case 2:
        var value = /** @type {string} */ (reader.readString())
        msg.setMessageType(value)
        break
      default:
        reader.skipField()
        break
    }
  }
  return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.MessageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter()
  proto.message.MessageResponse.serializeBinaryToWriter(this, writer)
  return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.MessageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.MessageResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined
  f = message.getMessageId()
  if (f.length > 0) {
    writer.writeString(1, f)
  }
  f = message.getMessageType()
  if (f.length > 0) {
    writer.writeString(2, f)
  }
}

/**
 * optional string message_id = 1;
 * @return {string}
 */
proto.message.MessageResponse.prototype.getMessageId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/** @param {string} value */
proto.message.MessageResponse.prototype.setMessageId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string message_type = 2;
 * @return {string}
 */
proto.message.MessageResponse.prototype.getMessageType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/** @param {string} value */
proto.message.MessageResponse.prototype.setMessageType = function(value) {
  jspb.Message.setProto3StringField(this, 2, value)
}

goog.object.extend(exports, proto.message)
